Requirements

- user can log in
    - UI that accepts login information (email, password?)
    - Submit button
    - API that takes email/password and creates a session
    - what is a session?
        - cookie
        - token in sessionStorage
- multiple users can access the data
- add/track some measurements at a specific time
    - diet
    - blood pressure
    - medication
    - must include a timestamp
- store the results in persistent storage (MongoDB)
- results are displayed in a table
    - how should the table look?
        - HW for Eduardo: look around the internet for tables that you like. Save screenshots or bookmarks so we can know what we're aiming for
    - maybe HTML table

Goals

- identify if there are certain things that are causing harm / good

Tasks

1. Setup
    a. Create repo using Github's web interface
    b. Clone the repo to your computer
    c. run "npm init"
    d. MongoDB - create account and new database / project
    e. create `.env` file - add MongoDB connection URL to `.env`
2. Configure app
    a. install dependencies (express, mongoose, dotenv, )
    b. create a "start" command https://github.com/Layloe/MVCfs/blob/383b3aa1fef66f81e7f1571bd08f8f6fc2fa8c61/package.json#L8
    c. create a `server.js` file
3. Build login features
    a. defined the route / routes
    b. make a view for the UI form
    c. make a API handler to accept email/password
4. Update bloodPressure input
    a. Use JS to automagicly use slash
    b. Split blood pressure into two inputs
5. Responsive design: bootstrap/react
6. Task for calender view: design
7. New entry on the top of the list

*React rewrite
1.Get the Elisa app to a working state and commit and push.
    a. Get the server to connect to react front-end 
    -possible ideas: use the Blog backend as temp server till up and running
    -start looking at both server.js compare, look where react is pointing too
    -compare cards
    -use npm run startReact for front end
    -Keep it slow, just focus on getting React connected to backend
    b.notes about changes and what I need to revert if I brake it:
    ****When you make http requests in React (e.g. with axios), are you expecting to receive JSON or HTML?
    ****In the Elisa app, how does it render the HTML? What files are responsible for generating the server response.
        -installed cors 
        -added cors to middleware and for now commented out app.set("view engine", "ejs")
        -updated route paths in HomePage.js, NewPostPage.js, and PostPage.js to make API requests to the Express 
        -inspect index.html and inspect index.js/ inspect controllers
        -npm run startReact for frontend
        -inpected devtools/network tab = html !json
        -added a <script src="/build/index.js"></script> into index.html
        -testing: changed the /controllers/home.js to render "ejs" to render "react" *didn't seem to change anything
        -changed app.use(express.static('public')) to app.use(express.json())
        -going to organize my folder structure to help me carpementalize my thinking.
        -might approch this from a diffrent angle
        - 
